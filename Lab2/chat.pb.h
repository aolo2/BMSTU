// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chat.proto

#ifndef PROTOBUF_chat_2eproto__INCLUDED
#define PROTOBUF_chat_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_chat_2eproto();
void protobuf_AssignDesc_chat_2eproto();
void protobuf_ShutdownFile_chat_2eproto();

class Answer;
class Request;

enum Request_RequestType {
  Request_RequestType_DC = 0,
  Request_RequestType_LIST = 1,
  Request_RequestType_TEXT = 2
};
bool Request_RequestType_IsValid(int value);
const Request_RequestType Request_RequestType_RequestType_MIN = Request_RequestType_DC;
const Request_RequestType Request_RequestType_RequestType_MAX = Request_RequestType_TEXT;
const int Request_RequestType_RequestType_ARRAYSIZE = Request_RequestType_RequestType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Request_RequestType_descriptor();
inline const ::std::string& Request_RequestType_Name(Request_RequestType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Request_RequestType_descriptor(), value);
}
inline bool Request_RequestType_Parse(
    const ::std::string& name, Request_RequestType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Request_RequestType>(
    Request_RequestType_descriptor(), name, value);
}
enum Answer_AnswerType {
  Answer_AnswerType_LIST = 0,
  Answer_AnswerType_TEXT = 1,
  Answer_AnswerType_GREETING = 2
};
bool Answer_AnswerType_IsValid(int value);
const Answer_AnswerType Answer_AnswerType_AnswerType_MIN = Answer_AnswerType_LIST;
const Answer_AnswerType Answer_AnswerType_AnswerType_MAX = Answer_AnswerType_GREETING;
const int Answer_AnswerType_AnswerType_ARRAYSIZE = Answer_AnswerType_AnswerType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Answer_AnswerType_descriptor();
inline const ::std::string& Answer_AnswerType_Name(Answer_AnswerType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Answer_AnswerType_descriptor(), value);
}
inline bool Answer_AnswerType_Parse(
    const ::std::string& name, Answer_AnswerType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Answer_AnswerType>(
    Answer_AnswerType_descriptor(), name, value);
}
// ===================================================================

class Request : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Request) */ {
 public:
  Request();
  virtual ~Request();

  Request(const Request& from);

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Request& default_instance();

  void Swap(Request* other);

  // implements Message ----------------------------------------------

  inline Request* New() const { return New(NULL); }

  Request* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Request_RequestType RequestType;
  static const RequestType DC =
    Request_RequestType_DC;
  static const RequestType LIST =
    Request_RequestType_LIST;
  static const RequestType TEXT =
    Request_RequestType_TEXT;
  static inline bool RequestType_IsValid(int value) {
    return Request_RequestType_IsValid(value);
  }
  static const RequestType RequestType_MIN =
    Request_RequestType_RequestType_MIN;
  static const RequestType RequestType_MAX =
    Request_RequestType_RequestType_MAX;
  static const int RequestType_ARRAYSIZE =
    Request_RequestType_RequestType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  RequestType_descriptor() {
    return Request_RequestType_descriptor();
  }
  static inline const ::std::string& RequestType_Name(RequestType value) {
    return Request_RequestType_Name(value);
  }
  static inline bool RequestType_Parse(const ::std::string& name,
      RequestType* value) {
    return Request_RequestType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .Request.RequestType type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::Request_RequestType type() const;
  void set_type(::Request_RequestType value);

  // optional string text = 2;
  bool has_text() const;
  void clear_text();
  static const int kTextFieldNumber = 2;
  const ::std::string& text() const;
  void set_text(const ::std::string& value);
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  ::std::string* mutable_text();
  ::std::string* release_text();
  void set_allocated_text(::std::string* text);

  // @@protoc_insertion_point(class_scope:Request)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_text();
  inline void clear_has_text();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr text_;
  int type_;
  friend void  protobuf_AddDesc_chat_2eproto();
  friend void protobuf_AssignDesc_chat_2eproto();
  friend void protobuf_ShutdownFile_chat_2eproto();

  void InitAsDefaultInstance();
  static Request* default_instance_;
};
// -------------------------------------------------------------------

class Answer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Answer) */ {
 public:
  Answer();
  virtual ~Answer();

  Answer(const Answer& from);

  inline Answer& operator=(const Answer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Answer& default_instance();

  void Swap(Answer* other);

  // implements Message ----------------------------------------------

  inline Answer* New() const { return New(NULL); }

  Answer* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Answer& from);
  void MergeFrom(const Answer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Answer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Answer_AnswerType AnswerType;
  static const AnswerType LIST =
    Answer_AnswerType_LIST;
  static const AnswerType TEXT =
    Answer_AnswerType_TEXT;
  static const AnswerType GREETING =
    Answer_AnswerType_GREETING;
  static inline bool AnswerType_IsValid(int value) {
    return Answer_AnswerType_IsValid(value);
  }
  static const AnswerType AnswerType_MIN =
    Answer_AnswerType_AnswerType_MIN;
  static const AnswerType AnswerType_MAX =
    Answer_AnswerType_AnswerType_MAX;
  static const int AnswerType_ARRAYSIZE =
    Answer_AnswerType_AnswerType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  AnswerType_descriptor() {
    return Answer_AnswerType_descriptor();
  }
  static inline const ::std::string& AnswerType_Name(AnswerType value) {
    return Answer_AnswerType_Name(value);
  }
  static inline bool AnswerType_Parse(const ::std::string& name,
      AnswerType* value) {
    return Answer_AnswerType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .Answer.AnswerType type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::Answer_AnswerType type() const;
  void set_type(::Answer_AnswerType value);

  // optional string sender_name = 2;
  bool has_sender_name() const;
  void clear_sender_name();
  static const int kSenderNameFieldNumber = 2;
  const ::std::string& sender_name() const;
  void set_sender_name(const ::std::string& value);
  void set_sender_name(const char* value);
  void set_sender_name(const char* value, size_t size);
  ::std::string* mutable_sender_name();
  ::std::string* release_sender_name();
  void set_allocated_sender_name(::std::string* sender_name);

  // repeated string list = 3;
  int list_size() const;
  void clear_list();
  static const int kListFieldNumber = 3;
  const ::std::string& list(int index) const;
  ::std::string* mutable_list(int index);
  void set_list(int index, const ::std::string& value);
  void set_list(int index, const char* value);
  void set_list(int index, const char* value, size_t size);
  ::std::string* add_list();
  void add_list(const ::std::string& value);
  void add_list(const char* value);
  void add_list(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& list() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_list();

  // optional string text = 4;
  bool has_text() const;
  void clear_text();
  static const int kTextFieldNumber = 4;
  const ::std::string& text() const;
  void set_text(const ::std::string& value);
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  ::std::string* mutable_text();
  ::std::string* release_text();
  void set_allocated_text(::std::string* text);

  // @@protoc_insertion_point(class_scope:Answer)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_sender_name();
  inline void clear_has_sender_name();
  inline void set_has_text();
  inline void clear_has_text();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr sender_name_;
  ::google::protobuf::RepeatedPtrField< ::std::string> list_;
  ::google::protobuf::internal::ArenaStringPtr text_;
  int type_;
  friend void  protobuf_AddDesc_chat_2eproto();
  friend void protobuf_AssignDesc_chat_2eproto();
  friend void protobuf_ShutdownFile_chat_2eproto();

  void InitAsDefaultInstance();
  static Answer* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Request

// required .Request.RequestType type = 1;
inline bool Request::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Request::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Request::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Request::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::Request_RequestType Request::type() const {
  // @@protoc_insertion_point(field_get:Request.type)
  return static_cast< ::Request_RequestType >(type_);
}
inline void Request::set_type(::Request_RequestType value) {
  assert(::Request_RequestType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Request.type)
}

// optional string text = 2;
inline bool Request::has_text() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Request::set_has_text() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Request::clear_has_text() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Request::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_text();
}
inline const ::std::string& Request::text() const {
  // @@protoc_insertion_point(field_get:Request.text)
  return text_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Request::set_text(const ::std::string& value) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Request.text)
}
inline void Request::set_text(const char* value) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Request.text)
}
inline void Request::set_text(const char* value, size_t size) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Request.text)
}
inline ::std::string* Request::mutable_text() {
  set_has_text();
  // @@protoc_insertion_point(field_mutable:Request.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Request::release_text() {
  // @@protoc_insertion_point(field_release:Request.text)
  clear_has_text();
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Request::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    set_has_text();
  } else {
    clear_has_text();
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:Request.text)
}

// -------------------------------------------------------------------

// Answer

// required .Answer.AnswerType type = 1;
inline bool Answer::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Answer::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Answer::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Answer::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::Answer_AnswerType Answer::type() const {
  // @@protoc_insertion_point(field_get:Answer.type)
  return static_cast< ::Answer_AnswerType >(type_);
}
inline void Answer::set_type(::Answer_AnswerType value) {
  assert(::Answer_AnswerType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Answer.type)
}

// optional string sender_name = 2;
inline bool Answer::has_sender_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Answer::set_has_sender_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Answer::clear_has_sender_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Answer::clear_sender_name() {
  sender_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sender_name();
}
inline const ::std::string& Answer::sender_name() const {
  // @@protoc_insertion_point(field_get:Answer.sender_name)
  return sender_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Answer::set_sender_name(const ::std::string& value) {
  set_has_sender_name();
  sender_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Answer.sender_name)
}
inline void Answer::set_sender_name(const char* value) {
  set_has_sender_name();
  sender_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Answer.sender_name)
}
inline void Answer::set_sender_name(const char* value, size_t size) {
  set_has_sender_name();
  sender_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Answer.sender_name)
}
inline ::std::string* Answer::mutable_sender_name() {
  set_has_sender_name();
  // @@protoc_insertion_point(field_mutable:Answer.sender_name)
  return sender_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Answer::release_sender_name() {
  // @@protoc_insertion_point(field_release:Answer.sender_name)
  clear_has_sender_name();
  return sender_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Answer::set_allocated_sender_name(::std::string* sender_name) {
  if (sender_name != NULL) {
    set_has_sender_name();
  } else {
    clear_has_sender_name();
  }
  sender_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sender_name);
  // @@protoc_insertion_point(field_set_allocated:Answer.sender_name)
}

// repeated string list = 3;
inline int Answer::list_size() const {
  return list_.size();
}
inline void Answer::clear_list() {
  list_.Clear();
}
inline const ::std::string& Answer::list(int index) const {
  // @@protoc_insertion_point(field_get:Answer.list)
  return list_.Get(index);
}
inline ::std::string* Answer::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:Answer.list)
  return list_.Mutable(index);
}
inline void Answer::set_list(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Answer.list)
  list_.Mutable(index)->assign(value);
}
inline void Answer::set_list(int index, const char* value) {
  list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Answer.list)
}
inline void Answer::set_list(int index, const char* value, size_t size) {
  list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Answer.list)
}
inline ::std::string* Answer::add_list() {
  // @@protoc_insertion_point(field_add_mutable:Answer.list)
  return list_.Add();
}
inline void Answer::add_list(const ::std::string& value) {
  list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Answer.list)
}
inline void Answer::add_list(const char* value) {
  list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Answer.list)
}
inline void Answer::add_list(const char* value, size_t size) {
  list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Answer.list)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Answer::list() const {
  // @@protoc_insertion_point(field_list:Answer.list)
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Answer::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:Answer.list)
  return &list_;
}

// optional string text = 4;
inline bool Answer::has_text() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Answer::set_has_text() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Answer::clear_has_text() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Answer::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_text();
}
inline const ::std::string& Answer::text() const {
  // @@protoc_insertion_point(field_get:Answer.text)
  return text_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Answer::set_text(const ::std::string& value) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Answer.text)
}
inline void Answer::set_text(const char* value) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Answer.text)
}
inline void Answer::set_text(const char* value, size_t size) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Answer.text)
}
inline ::std::string* Answer::mutable_text() {
  set_has_text();
  // @@protoc_insertion_point(field_mutable:Answer.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Answer::release_text() {
  // @@protoc_insertion_point(field_release:Answer.text)
  clear_has_text();
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Answer::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    set_has_text();
  } else {
    clear_has_text();
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:Answer.text)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Request_RequestType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Request_RequestType>() {
  return ::Request_RequestType_descriptor();
}
template <> struct is_proto_enum< ::Answer_AnswerType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Answer_AnswerType>() {
  return ::Answer_AnswerType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_chat_2eproto__INCLUDED
