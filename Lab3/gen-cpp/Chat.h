/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Chat_H
#define Chat_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "chat_types.h"

namespace chat {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class ChatIf {
 public:
  virtual ~ChatIf() {}
  virtual int32_t getCurrentLogId() = 0;
  virtual void getUserList(std::vector<std::string> & _return) = 0;
  virtual void missedMessages(std::vector<ChatMessage> & _return, const int32_t last, const int32_t uid) = 0;
  virtual int32_t get_uid(const std::string& username) = 0;
  virtual void sendMessage(const ChatMessage& msg) = 0;
  virtual void disconnectMe() = 0;
};

class ChatIfFactory {
 public:
  typedef ChatIf Handler;

  virtual ~ChatIfFactory() {}

  virtual ChatIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ChatIf* /* handler */) = 0;
};

class ChatIfSingletonFactory : virtual public ChatIfFactory {
 public:
  ChatIfSingletonFactory(const boost::shared_ptr<ChatIf>& iface) : iface_(iface) {}
  virtual ~ChatIfSingletonFactory() {}

  virtual ChatIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ChatIf* /* handler */) {}

 protected:
  boost::shared_ptr<ChatIf> iface_;
};

class ChatNull : virtual public ChatIf {
 public:
  virtual ~ChatNull() {}
  int32_t getCurrentLogId() {
    int32_t _return = 0;
    return _return;
  }
  void getUserList(std::vector<std::string> & /* _return */) {
    return;
  }
  void missedMessages(std::vector<ChatMessage> & /* _return */, const int32_t /* last */, const int32_t /* uid */) {
    return;
  }
  int32_t get_uid(const std::string& /* username */) {
    int32_t _return = 0;
    return _return;
  }
  void sendMessage(const ChatMessage& /* msg */) {
    return;
  }
  void disconnectMe() {
    return;
  }
};


class Chat_getCurrentLogId_args {
 public:

  Chat_getCurrentLogId_args(const Chat_getCurrentLogId_args&);
  Chat_getCurrentLogId_args& operator=(const Chat_getCurrentLogId_args&);
  Chat_getCurrentLogId_args() {
  }

  virtual ~Chat_getCurrentLogId_args() throw();

  bool operator == (const Chat_getCurrentLogId_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Chat_getCurrentLogId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Chat_getCurrentLogId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Chat_getCurrentLogId_pargs {
 public:


  virtual ~Chat_getCurrentLogId_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Chat_getCurrentLogId_result__isset {
  _Chat_getCurrentLogId_result__isset() : success(false) {}
  bool success :1;
} _Chat_getCurrentLogId_result__isset;

class Chat_getCurrentLogId_result {
 public:

  Chat_getCurrentLogId_result(const Chat_getCurrentLogId_result&);
  Chat_getCurrentLogId_result& operator=(const Chat_getCurrentLogId_result&);
  Chat_getCurrentLogId_result() : success(0) {
  }

  virtual ~Chat_getCurrentLogId_result() throw();
  int32_t success;

  _Chat_getCurrentLogId_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const Chat_getCurrentLogId_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Chat_getCurrentLogId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Chat_getCurrentLogId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Chat_getCurrentLogId_presult__isset {
  _Chat_getCurrentLogId_presult__isset() : success(false) {}
  bool success :1;
} _Chat_getCurrentLogId_presult__isset;

class Chat_getCurrentLogId_presult {
 public:


  virtual ~Chat_getCurrentLogId_presult() throw();
  int32_t* success;

  _Chat_getCurrentLogId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Chat_getUserList_args {
 public:

  Chat_getUserList_args(const Chat_getUserList_args&);
  Chat_getUserList_args& operator=(const Chat_getUserList_args&);
  Chat_getUserList_args() {
  }

  virtual ~Chat_getUserList_args() throw();

  bool operator == (const Chat_getUserList_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Chat_getUserList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Chat_getUserList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Chat_getUserList_pargs {
 public:


  virtual ~Chat_getUserList_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Chat_getUserList_result__isset {
  _Chat_getUserList_result__isset() : success(false) {}
  bool success :1;
} _Chat_getUserList_result__isset;

class Chat_getUserList_result {
 public:

  Chat_getUserList_result(const Chat_getUserList_result&);
  Chat_getUserList_result& operator=(const Chat_getUserList_result&);
  Chat_getUserList_result() {
  }

  virtual ~Chat_getUserList_result() throw();
  std::vector<std::string>  success;

  _Chat_getUserList_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  bool operator == (const Chat_getUserList_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Chat_getUserList_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Chat_getUserList_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Chat_getUserList_presult__isset {
  _Chat_getUserList_presult__isset() : success(false) {}
  bool success :1;
} _Chat_getUserList_presult__isset;

class Chat_getUserList_presult {
 public:


  virtual ~Chat_getUserList_presult() throw();
  std::vector<std::string> * success;

  _Chat_getUserList_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Chat_missedMessages_args__isset {
  _Chat_missedMessages_args__isset() : last(false), uid(false) {}
  bool last :1;
  bool uid :1;
} _Chat_missedMessages_args__isset;

class Chat_missedMessages_args {
 public:

  Chat_missedMessages_args(const Chat_missedMessages_args&);
  Chat_missedMessages_args& operator=(const Chat_missedMessages_args&);
  Chat_missedMessages_args() : last(0), uid(0) {
  }

  virtual ~Chat_missedMessages_args() throw();
  int32_t last;
  int32_t uid;

  _Chat_missedMessages_args__isset __isset;

  void __set_last(const int32_t val);

  void __set_uid(const int32_t val);

  bool operator == (const Chat_missedMessages_args & rhs) const
  {
    if (!(last == rhs.last))
      return false;
    if (!(uid == rhs.uid))
      return false;
    return true;
  }
  bool operator != (const Chat_missedMessages_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Chat_missedMessages_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Chat_missedMessages_pargs {
 public:


  virtual ~Chat_missedMessages_pargs() throw();
  const int32_t* last;
  const int32_t* uid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Chat_missedMessages_result__isset {
  _Chat_missedMessages_result__isset() : success(false) {}
  bool success :1;
} _Chat_missedMessages_result__isset;

class Chat_missedMessages_result {
 public:

  Chat_missedMessages_result(const Chat_missedMessages_result&);
  Chat_missedMessages_result& operator=(const Chat_missedMessages_result&);
  Chat_missedMessages_result() {
  }

  virtual ~Chat_missedMessages_result() throw();
  std::vector<ChatMessage>  success;

  _Chat_missedMessages_result__isset __isset;

  void __set_success(const std::vector<ChatMessage> & val);

  bool operator == (const Chat_missedMessages_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Chat_missedMessages_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Chat_missedMessages_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Chat_missedMessages_presult__isset {
  _Chat_missedMessages_presult__isset() : success(false) {}
  bool success :1;
} _Chat_missedMessages_presult__isset;

class Chat_missedMessages_presult {
 public:


  virtual ~Chat_missedMessages_presult() throw();
  std::vector<ChatMessage> * success;

  _Chat_missedMessages_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Chat_get_uid_args__isset {
  _Chat_get_uid_args__isset() : username(false) {}
  bool username :1;
} _Chat_get_uid_args__isset;

class Chat_get_uid_args {
 public:

  Chat_get_uid_args(const Chat_get_uid_args&);
  Chat_get_uid_args& operator=(const Chat_get_uid_args&);
  Chat_get_uid_args() : username() {
  }

  virtual ~Chat_get_uid_args() throw();
  std::string username;

  _Chat_get_uid_args__isset __isset;

  void __set_username(const std::string& val);

  bool operator == (const Chat_get_uid_args & rhs) const
  {
    if (!(username == rhs.username))
      return false;
    return true;
  }
  bool operator != (const Chat_get_uid_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Chat_get_uid_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Chat_get_uid_pargs {
 public:


  virtual ~Chat_get_uid_pargs() throw();
  const std::string* username;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Chat_get_uid_result__isset {
  _Chat_get_uid_result__isset() : success(false) {}
  bool success :1;
} _Chat_get_uid_result__isset;

class Chat_get_uid_result {
 public:

  Chat_get_uid_result(const Chat_get_uid_result&);
  Chat_get_uid_result& operator=(const Chat_get_uid_result&);
  Chat_get_uid_result() : success(0) {
  }

  virtual ~Chat_get_uid_result() throw();
  int32_t success;

  _Chat_get_uid_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const Chat_get_uid_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Chat_get_uid_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Chat_get_uid_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Chat_get_uid_presult__isset {
  _Chat_get_uid_presult__isset() : success(false) {}
  bool success :1;
} _Chat_get_uid_presult__isset;

class Chat_get_uid_presult {
 public:


  virtual ~Chat_get_uid_presult() throw();
  int32_t* success;

  _Chat_get_uid_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Chat_sendMessage_args__isset {
  _Chat_sendMessage_args__isset() : msg(false) {}
  bool msg :1;
} _Chat_sendMessage_args__isset;

class Chat_sendMessage_args {
 public:

  Chat_sendMessage_args(const Chat_sendMessage_args&);
  Chat_sendMessage_args& operator=(const Chat_sendMessage_args&);
  Chat_sendMessage_args() {
  }

  virtual ~Chat_sendMessage_args() throw();
  ChatMessage msg;

  _Chat_sendMessage_args__isset __isset;

  void __set_msg(const ChatMessage& val);

  bool operator == (const Chat_sendMessage_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const Chat_sendMessage_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Chat_sendMessage_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Chat_sendMessage_pargs {
 public:


  virtual ~Chat_sendMessage_pargs() throw();
  const ChatMessage* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Chat_disconnectMe_args {
 public:

  Chat_disconnectMe_args(const Chat_disconnectMe_args&);
  Chat_disconnectMe_args& operator=(const Chat_disconnectMe_args&);
  Chat_disconnectMe_args() {
  }

  virtual ~Chat_disconnectMe_args() throw();

  bool operator == (const Chat_disconnectMe_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Chat_disconnectMe_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Chat_disconnectMe_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Chat_disconnectMe_pargs {
 public:


  virtual ~Chat_disconnectMe_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class ChatClient : virtual public ChatIf {
 public:
  ChatClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  ChatClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t getCurrentLogId();
  void send_getCurrentLogId();
  int32_t recv_getCurrentLogId();
  void getUserList(std::vector<std::string> & _return);
  void send_getUserList();
  void recv_getUserList(std::vector<std::string> & _return);
  void missedMessages(std::vector<ChatMessage> & _return, const int32_t last, const int32_t uid);
  void send_missedMessages(const int32_t last, const int32_t uid);
  void recv_missedMessages(std::vector<ChatMessage> & _return);
  int32_t get_uid(const std::string& username);
  void send_get_uid(const std::string& username);
  int32_t recv_get_uid();
  void sendMessage(const ChatMessage& msg);
  void send_sendMessage(const ChatMessage& msg);
  void disconnectMe();
  void send_disconnectMe();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ChatProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<ChatIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ChatProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_getCurrentLogId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getUserList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_missedMessages(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_uid(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sendMessage(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_disconnectMe(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ChatProcessor(boost::shared_ptr<ChatIf> iface) :
    iface_(iface) {
    processMap_["getCurrentLogId"] = &ChatProcessor::process_getCurrentLogId;
    processMap_["getUserList"] = &ChatProcessor::process_getUserList;
    processMap_["missedMessages"] = &ChatProcessor::process_missedMessages;
    processMap_["get_uid"] = &ChatProcessor::process_get_uid;
    processMap_["sendMessage"] = &ChatProcessor::process_sendMessage;
    processMap_["disconnectMe"] = &ChatProcessor::process_disconnectMe;
  }

  virtual ~ChatProcessor() {}
};

class ChatProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ChatProcessorFactory(const ::boost::shared_ptr< ChatIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< ChatIfFactory > handlerFactory_;
};

class ChatMultiface : virtual public ChatIf {
 public:
  ChatMultiface(std::vector<boost::shared_ptr<ChatIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ChatMultiface() {}
 protected:
  std::vector<boost::shared_ptr<ChatIf> > ifaces_;
  ChatMultiface() {}
  void add(boost::shared_ptr<ChatIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int32_t getCurrentLogId() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getCurrentLogId();
    }
    return ifaces_[i]->getCurrentLogId();
  }

  void getUserList(std::vector<std::string> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getUserList(_return);
    }
    ifaces_[i]->getUserList(_return);
    return;
  }

  void missedMessages(std::vector<ChatMessage> & _return, const int32_t last, const int32_t uid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->missedMessages(_return, last, uid);
    }
    ifaces_[i]->missedMessages(_return, last, uid);
    return;
  }

  int32_t get_uid(const std::string& username) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_uid(username);
    }
    return ifaces_[i]->get_uid(username);
  }

  void sendMessage(const ChatMessage& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sendMessage(msg);
    }
    ifaces_[i]->sendMessage(msg);
  }

  void disconnectMe() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->disconnectMe();
    }
    ifaces_[i]->disconnectMe();
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class ChatConcurrentClient : virtual public ChatIf {
 public:
  ChatConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  ChatConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t getCurrentLogId();
  int32_t send_getCurrentLogId();
  int32_t recv_getCurrentLogId(const int32_t seqid);
  void getUserList(std::vector<std::string> & _return);
  int32_t send_getUserList();
  void recv_getUserList(std::vector<std::string> & _return, const int32_t seqid);
  void missedMessages(std::vector<ChatMessage> & _return, const int32_t last, const int32_t uid);
  int32_t send_missedMessages(const int32_t last, const int32_t uid);
  void recv_missedMessages(std::vector<ChatMessage> & _return, const int32_t seqid);
  int32_t get_uid(const std::string& username);
  int32_t send_get_uid(const std::string& username);
  int32_t recv_get_uid(const int32_t seqid);
  void sendMessage(const ChatMessage& msg);
  void send_sendMessage(const ChatMessage& msg);
  void disconnectMe();
  void send_disconnectMe();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

} // namespace

#endif
