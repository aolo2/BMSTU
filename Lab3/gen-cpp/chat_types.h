/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef chat_TYPES_H
#define chat_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace chat {

class UsernameTaken;

class ChatMessage;


class UsernameTaken : public ::apache::thrift::TException {
 public:

  UsernameTaken(const UsernameTaken&);
  UsernameTaken& operator=(const UsernameTaken&);
  UsernameTaken() {
  }

  virtual ~UsernameTaken() throw();

  bool operator == (const UsernameTaken & /* rhs */) const
  {
    return true;
  }
  bool operator != (const UsernameTaken &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UsernameTaken & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
  mutable std::string thriftTExceptionMessageHolder_;
  const char* what() const throw();
};

void swap(UsernameTaken &a, UsernameTaken &b);

inline std::ostream& operator<<(std::ostream& out, const UsernameTaken& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _ChatMessage__isset {
  _ChatMessage__isset() : text(false), uid(false), username(false) {}
  bool text :1;
  bool uid :1;
  bool username :1;
} _ChatMessage__isset;

class ChatMessage {
 public:

  ChatMessage(const ChatMessage&);
  ChatMessage& operator=(const ChatMessage&);
  ChatMessage() : text(), uid(0), username() {
  }

  virtual ~ChatMessage() throw();
  std::string text;
  int32_t uid;
  std::string username;

  _ChatMessage__isset __isset;

  void __set_text(const std::string& val);

  void __set_uid(const int32_t val);

  void __set_username(const std::string& val);

  bool operator == (const ChatMessage & rhs) const
  {
    if (!(text == rhs.text))
      return false;
    if (!(uid == rhs.uid))
      return false;
    if (!(username == rhs.username))
      return false;
    return true;
  }
  bool operator != (const ChatMessage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChatMessage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ChatMessage &a, ChatMessage &b);

inline std::ostream& operator<<(std::ostream& out, const ChatMessage& obj)
{
  obj.printTo(out);
  return out;
}

} // namespace

#endif
